#!/usr/bin/env bash

set -e

# Default values
INPUTCOL=0
BACKENDS=('c' 'ispc' 'multicore' 'opencl')
CSV=""
RANGE=""
SKIP_BENCHMARKS=""
SKIP_CSV=""
QUIET=""
FUTHARK_ARGS=()

! [ -t 1 ] && QUIET="PIPE"

while [[ $# -gt 0 ]]; do
  case $1 in
    -k)
      INPUTCOL="${2}"
      shift;shift;;

    -b|--backend)
      IFS="," read -r -a BACKENDS <<< "${2}"
      shift;shift;;

    -o|--csv)
      CSV="${2}"
      shift;shift;;

    -r|--range)
      RANGE="RANGEMATCH"
      shift;;

    --skip-benchmarks)
      SKIP_BENCHMARKS="SKIP"
      shift;;

    --skip-csv)
      SKIP_CSV="SKIP"
      shift;;

    -q|--quiet)
      QUIET=STFU
      shift;;

    -v|--verbose)
      QUIET=""
      shift;;

    *.fut)
      FUTHARK_PROGRAM="${1}"
      shift;;

    --)
      shift
      while [[ $# -gt 0 ]]; do
        FUTHARK_ARGS+=("$1");shift
      done;;

    -h|--help)
      [ -n "${QUIET}" ] && exit 0
      echo -e "Usage: ${0} [OPTION] PROGRAM.fut [-- BENCH_OPTION]\n"
      BB="${BACKENDS[*]}"
      echo \
"Options:
  -k ARG              The benchmark entrys ith input argument to use for 'n' in
                      the output csv file.
  -b BACKEND(S)       A comma seperated list of backends to run the benchmark
                      on. Default is: \"${BB// /,}\"
  -o CSV              Name of the output csv file, printed to stdout otherwise.
  --range             Match benchmark arguments with random input.
  --skip-benchmarks   Skip running the actual benchmarks, useful if they have
                      already been run, but not formatted
  --skip-csv          Skip printing/writing the csv output.
  --quiet             Do not print anything.
  --verbose           Do not suppress output when piped.

  --                  all arguments after \"--\" is passed to "futhark-bench"
"
      exit 0
      ;;
    *)
      echo "Unknown argument \"$1\""
      exit 1
  esac
done

# Some stats regarding the benchmarking machine
CPUMODEL=$(lscpu | sed '/Model name/!d;s/^.*: *//')
NUMPROCS=$(nproc)

# Run the benchmarks
if [ -z "${SKIP_BENCHMARKS}" ]; then
  for b in "${BACKENDS[@]}"; do
    [ -z "${QUIET}" ] && echo "Running benchmarks with '$b' backend..."
    RESULTFILE=result-$b.bench
    echo "${CPUMODEL} with ${NUMPROCS} cores" > "$RESULTFILE"
    echo "Backend: $b" >> "$RESULTFILE"
    futhark bench --backend="$b" "${FUTHARK_ARGS[@]}" "${FUTHARK_PROGRAM}" >> "$RESULTFILE"
  done
fi

if [ -z "${SKIP_CSV}" ]; then
  ## Some common sed regular expressions/commands
  # strip type suffixes from the input
  RE_TYPES='(i|f)(8|16|32|64)'
  RE_RM_TYPES="s/${RE_TYPES}//g"
  # Removes all lines not starting with '#'
  RE_RESULT_LINES="/^#|${RE_TYPES}|\[[0-9]\]${RE_TYPES}/!d"
  # Retrieve the average runtime from the input
  RE_RESULTS='s/^.*: *([0-9]+)Î¼s .*/\1/'

  # Match input parameters  ## TODO: Detect argument type instead
  if [ -z "${RANGE}" ]; then
    RE_N_COLUMN="s/.*\\(\"([0-9]+\\.?[0-9]+? |true |false ){${INPUTCOL}}([0-9]+\\.?[0-9]+?|true|false) ?.*\"\\).*/\\2/g"
  else
    RE_N_COLUMN="s/^ *(\[[0-9]+\] |[0-9]+ ){2}(\[([0-9]+)\]|([0-9]+)) ?.*: .*/\\4\\3/g"
    #            s/ *(\[([0-9]+\\.?[0-9]+?)\] ){${INPUTCOL}}(\[([0-9]+\\.?[0-9]+?)\]) ?.*: .*/\\4/g
  fi

  # Get `n` and the input sizes
  RESULT="n,$(sed -E "${RE_RESULT_LINES};${RE_RM_TYPES};${RE_N_COLUMN}" "result-${BACKENDS[0]}.bench" | tr '\n' ',' | sed -E 's/,$//')"
  echo $RESULT
  echo ""
  for b in "${BACKENDS[@]}"; do
    R=$(sed -E "${RE_RESULT_LINES};${RE_RM_TYPES};${RE_RESULTS}" "result-${b}.bench" | tr '\n' ',' | sed -E 's/,$//')
    RESULT="${RESULT}\n${b},${R}"
  done

  transpose() {
    awk 'BEGIN { FS=OFS="," }
    {
      for (rowNr=1;rowNr<=NF;rowNr++) {
        cell[rowNr,NR] = $rowNr
      }
      maxRows = (NF > maxRows ? NF : maxRows)
      maxCols = NR
    } END {
    for (rowNr=1;rowNr<=maxRows;rowNr++) {
      for (colNr=1;colNr<=maxCols;colNr++) {
        printf "%s%s", cell[rowNr,colNr], (colNr < maxCols ? OFS : ORS)
    }}}' -
  }

  if [ -n "${CSV}" ]; then
    echo -en "${RESULT}" | transpose > "${CSV}"
  else
    echo -en "${RESULT}" | transpose
  fi
fi
